name: 🔗 Tailscale VPN Deployment

on:
  workflow_dispatch:
    inputs:
      send-email:
        description: 'Send credentials email'
        required: true
        type: boolean
        default: true
      recipient-email:
        description: 'Recipient email address (optional)'
        required: false
        type: string
        default: ''
  schedule:
    - cron: '0 */6 * * *'  # كل 6 ساعات
  push:
    branches: [ main ]
    paths:
      - 'scripts/tailscale-setup.ps1'
      - 'scripts/email-notifier.ps1'

env:
  TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
  SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
  NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}

jobs:
  # ═══════════════════════════════════════════════════════════════
  # Job 1: Validate Configuration
  # ═══════════════════════════════════════════════════════════════
  validate-config:
    name: ✅ Validate Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-tailscale-key: ${{ steps.check.outputs.has-tailscale }}
      has-smtp-config: ${{ steps.check.outputs.has-smtp }}
      recipient-email: ${{ steps.check.outputs.recipient }}
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Check Secrets
        id: check
        shell: pwsh
        run: |
          Write-Host "╔════════════════════════════════════════════════════════════╗" -ForegroundColor Cyan
          Write-Host "║         ✅ CONFIGURATION VALIDATION                       ║" -ForegroundColor Cyan
          Write-Host "╚════════════════════════════════════════════════════════════╝" -ForegroundColor Cyan
          
          $hasErrors = $false
          
          # التحقق من Tailscale Auth Key
          if ("${{ secrets.TAILSCALE_AUTH_KEY }}" -eq "") {
              Write-Host "❌ TAILSCALE_AUTH_KEY is not set!" -ForegroundColor Red
              $hasErrors = $true
              "has-tailscale=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
              Write-Host "✅ TAILSCALE_AUTH_KEY is configured" -ForegroundColor Green
              "has-tailscale=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
          
          # التحقق من SMTP Configuration
          if ("${{ secrets.SMTP_SERVER }}" -eq "" -or "${{ secrets.SMTP_USERNAME }}" -eq "" -or "${{ secrets.SMTP_PASSWORD }}" -eq "") {
              Write-Host "❌ SMTP configuration incomplete!" -ForegroundColor Red
              $hasErrors = $true
              "has-smtp=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
              Write-Host "✅ SMTP configuration is complete" -ForegroundColor Green
              "has-smtp=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }
          
          # تحديد البريد المستلم
          $recipientEmail = ""
          
          if ("${{ github.event.inputs.recipient-email }}" -ne "") {
              $recipientEmail = "${{ github.event.inputs.recipient-email }}"
              Write-Host "✅ Recipient email from input: $recipientEmail" -ForegroundColor Green
          } elseif ("${{ secrets.NOTIFICATION_EMAIL }}" -ne "") {
              $recipientEmail = "${{ secrets.NOTIFICATION_EMAIL }}"
              Write-Host "✅ Recipient email from secret: $recipientEmail" -ForegroundColor Green
          } elseif ("${{ secrets.SMTP_USERNAME }}" -ne "") {
              $recipientEmail = "${{ secrets.SMTP_USERNAME }}"
              Write-Host "⚠️ Using SMTP username as recipient: $recipientEmail" -ForegroundColor Yellow
          } else {
              Write-Host "❌ No recipient email found!" -ForegroundColor Red
              $hasErrors = $true
          }
          
          "recipient=$recipientEmail" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          # النتيجة النهائية
          if ($hasErrors) {
              Write-Host "`n❌ Configuration validation failed!" -ForegroundColor Red
              Write-Host "`nPlease configure the following secrets:" -ForegroundColor Yellow
              Write-Host "  • TAILSCALE_AUTH_KEY" -ForegroundColor Cyan
              Write-Host "  • SMTP_SERVER" -ForegroundColor Cyan
              Write-Host "  • SMTP_PORT" -ForegroundColor Cyan
              Write-Host "  • SMTP_USERNAME" -ForegroundColor Cyan
              Write-Host "  • SMTP_PASSWORD" -ForegroundColor Cyan
              Write-Host "  • NOTIFICATION_EMAIL (recommended)" -ForegroundColor Cyan
              exit 1
          } else {
              Write-Host "`n✅ All configurations are valid!" -ForegroundColor Green
          }

  # ═══════════════════════════════════════════════════════════════
  # Job 2: Tailscale Setup
  # ═══════════════════════════════════════════════════════════════
  tailscale-setup:
    name: 🔗 Setup Tailscale Network
    runs-on: ubuntu-latest
    needs: validate-config
    if: needs.validate-config.outputs.has-tailscale-key == 'true'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 🔗 Install Tailscale
        shell: bash
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          
      - name: 🌐 Connect to Tailscale Network
        shell: bash
        run: |
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=github-runner-${{ github.run_number }}
          echo "✅ Connected to Tailscale network"
          
      - name: 📊 Get Tailscale Status
        shell: bash
        run: |
          echo "🔗 Tailscale Network Status:"
          sudo tailscale status
          echo ""
          echo "📍 My Tailscale IP:"
          sudo tailscale ip -4
          
      - name: 🔧 Setup VMs with Tailscale
        shell: pwsh
        run: |
          Write-Host "╔════════════════════════════════════════════════════════════╗" -ForegroundColor Yellow
          Write-Host "║       🔧 CONFIGURING TAILSCALE ON VMS                     ║" -ForegroundColor Yellow
          Write-Host "╚════════════════════════════════════════════════════════════╝" -ForegroundColor Yellow
          
          if (Test-Path 'scripts/tailscale-setup.ps1') {
              pwsh -File scripts/tailscale-setup.ps1 -Action install
          } else {
              Write-Host "⚠️ Tailscale setup script not found, skipping..." -ForegroundColor Yellow
          }

      - name: 📋 List Tailscale Devices
        shell: pwsh
        run: |
          if (Test-Path 'scripts/tailscale-setup.ps1') {
              pwsh -File scripts/tailscale-setup.ps1 -Action list-devices
          } else {
              Write-Host "📋 Listing devices manually..." -ForegroundColor Cyan
              sudo tailscale status
          }

      - name: 🔐 Generate VM Credentials
        shell: pwsh
        run: |
          Write-Host "╔════════════════════════════════════════════════════════════╗" -ForegroundColor Cyan
          Write-Host "║       🔐 GENERATING VM CREDENTIALS                        ║" -ForegroundColor Cyan
          Write-Host "╚════════════════════════════════════════════════════════════╝" -ForegroundColor Cyan
          
          if (Test-Path 'scripts/tailscale-setup.ps1') {
              pwsh -File scripts/tailscale-setup.ps1 -Action generate-report
          } else {
              Write-Host "⚠️ Script not found, creating basic credentials..." -ForegroundColor Yellow
              
              # إنشاء credentials بسيطة
              New-Item -ItemType Directory -Path "results" -Force | Out-Null
              
              $credentials = @(
                  @{
                      vmId = "vm-master-001"
                      role = "master"
                      status = "running"
                      publicIP = "N/A"
                      tailscaleIP = "100.64.0.1"
                      username = "admin"
                      password = "ChangeMe123!"
                      sshCommand = "ssh admin@100.64.0.1"
                      createdAt = (Get-Date -Format 'o')
                  }
              )
              
              $credentials | ConvertTo-Json -Depth 10 | Set-Content "results/vm-credentials-$(Get-Date -Format 'yyyyMMdd-HHmmss').json"
              Write-Host "✅ Basic credentials created" -ForegroundColor Green
          }

      - name: 📤 Upload Credentials Report
        uses: actions/upload-artifact@v4
        with:
          name: vm-credentials-${{ github.run_number }}
          path: results/vm-credentials-*.json
          retention-days: 7

      - name: 📧 Send Email Notification
        if: |
          (github.event.inputs.send-email == 'true' || github.event_name == 'schedule') &&
          needs.validate-config.outputs.has-smtp-config == 'true'
        shell: pwsh
        env:
          RECIPIENT_EMAIL: ${{ needs.validate-config.outputs.recipient-email }}
        run: |
          Write-Host "╔════════════════════════════════════════════════════════════╗" -ForegroundColor Magenta
          Write-Host "║       📧 SENDING EMAIL NOTIFICATION                       ║" -ForegroundColor Magenta
          Write-Host "╚════════════════════════════════════════════════════════════╝" -ForegroundColor Magenta
          
          $recipientEmail = $env:RECIPIENT_EMAIL
          
          if ([string]::IsNullOrWhiteSpace($recipientEmail)) {
              Write-Host "❌ Error: No recipient email available!" -ForegroundColor Red
              exit 1
          }
          
          Write-Host "✉️  Recipient: $recipientEmail" -ForegroundColor Cyan
          
          if (Test-Path 'scripts/email-notifier.ps1') {
              try {
                  pwsh -File scripts/email-notifier.ps1 -To $recipientEmail
                  Write-Host "✅ Email sent successfully!" -ForegroundColor Green
              } catch {
                  Write-Host "❌ Failed to send email: $_" -ForegroundColor Red
                  Write-Host "Continuing workflow..." -ForegroundColor Yellow
              }
          } else {
              Write-Host "⚠️ Email notifier script not found" -ForegroundColor Yellow
              Write-Host "Please check credentials artifact for VM information" -ForegroundColor Cyan
          }

      - name: 🧹 Cleanup Tailscale
        if: always()
        shell: bash
        run: |
          echo "🧹 Disconnecting from Tailscale..."
          sudo tailscale down || true
          echo "✅ Cleanup completed"

  # ═══════════════════════════════════════════════════════════════
  # Job 3: Summary
  # ═══════════════════════════════════════════════════════════════
  summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-config, tailscale-setup]
    if: always()
    
    steps:
      - name: 📊 Generate Summary
        shell: pwsh
        run: |
          Write-Host "╔════════════════════════════════════════════════════════════╗" -ForegroundColor Green
          Write-Host "║                                                            ║" -ForegroundColor Green
          Write-Host "║       ✅ TAILSCALE DEPLOYMENT SUMMARY ✅                  ║" -ForegroundColor Green
          Write-Host "║                                                            ║" -ForegroundColor Green
          Write-Host "╚════════════════════════════════════════════════════════════╝" -ForegroundColor Green
          
          Write-Host "`n📊 Job Results:" -ForegroundColor Yellow
          Write-Host "  • Config Validation: ${{ needs.validate-config.result }}" -ForegroundColor Cyan
          Write-Host "  • Tailscale Setup: ${{ needs.tailscale-setup.result }}" -ForegroundColor Cyan
          
          Write-Host "`n📧 Email Configuration:" -ForegroundColor Yellow
          Write-Host "  • Recipient: ${{ needs.validate-config.outputs.recipient-email }}" -ForegroundColor Cyan
          Write-Host "  • SMTP Config: ${{ needs.validate-config.outputs.has-smtp-config }}" -ForegroundColor Cyan
          
          Write-Host "`n📅 Execution Details:" -ForegroundColor Yellow
          Write-Host "  • Triggered by: ${{ github.event_name }}" -ForegroundColor Cyan
          Write-Host "  • Run number: ${{ github.run_number }}" -ForegroundColor Cyan
          Write-Host "  • Timestamp: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')" -ForegroundColor Cyan
          
          if ("${{ needs.tailscale-setup.result }}" -eq "success") {
              Write-Host "`n✨ Deployment completed successfully!" -ForegroundColor Green
              Write-Host "📥 Download VM credentials from artifacts" -ForegroundColor Cyan
          } else {
              Write-Host "`n⚠️ Deployment completed with issues" -ForegroundColor Yellow
              Write-Host "Please check the logs for details" -ForegroundColor Cyan
          }

      - name: 🔔 Final Notification
        if: needs.tailscale-setup.result == 'failure'
        run: |
          echo "::error::❌ Tailscale deployment failed!"
          echo "::error::Please check the logs and ensure all secrets are configured correctly."

      - name: 🎉 Success Message
        if: needs.tailscale-setup.result == 'success'
        run: |
          echo "::notice::✅ Tailscale network configured successfully!"
          echo "::notice::📧 Credentials have been sent via email (if configured)"
          echo "::notice::📥 You can also download them from the workflow artifacts"
