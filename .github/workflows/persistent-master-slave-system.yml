name: 🔄 Persistent Master-Slave System

on:
  schedule:
    - cron: '0 * * * *'  # كل ساعة
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'full-cycle'
        type: choice
        options:
          - full-cycle
          - health-check
          - master-election
          - vm-creation
          - cleanup
      vm-count:
        description: 'Number of VMs to maintain'
        required: false
        default: '3'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DESIRED_VM_COUNT: 3
  VM_LIFETIME: 360
  CHECK_INTERVAL: 60
  POWERSHELL_VERSION: '7.4.0'

jobs:
  # ═══════════════════════════════════════════════════════════════
  # Job 1: Health Check & Validation
  # ═══════════════════════════════════════════════════════════════
  health-check:
    name: 🏥 Health Check & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      health-status: ${{ steps.health.outputs.status }}
      vm-count: ${{ steps.health.outputs.count }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          # تثبيت PowerShell 7
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh --version

      - name: 📊 System Health Check
        id: health
        shell: pwsh
        run: |
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Cyan
          Write-Host "║     🏥 SYSTEM HEALTH CHECK                      ║" -ForegroundColor Cyan
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Cyan
          
          # تحميل الإعدادات
          if (Test-Path '.github/system-config.json') {
              $config = Get-Content '.github/system-config.json' | ConvertFrom-Json
              Write-Host "✓ Config Loaded: Version $($config.version)" -ForegroundColor Green
          } else {
              Write-Host "⚠️ Config file not found" -ForegroundColor Yellow
              exit 1
          }
          
          if (Test-Path '.github/example-vms-state.json') {
              $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
              Write-Host "✓ Current VMs: $($vmsState.vms.Count)" -ForegroundColor Green
          } else {
              Write-Host "⚠️ VMs state file not found" -ForegroundColor Yellow
              exit 1
          }
          
          # التحقق من صحة الـ VMs
          $healthyVMs = 0
          foreach ($vm in $vmsState.vms) {
              if ($vm.status -eq "running") {
                  $healthyVMs++
              }
          }
          
          Write-Host "`n📊 Health Summary:" -ForegroundColor Yellow
          Write-Host "  • Total VMs: $($vmsState.vms.Count)" -ForegroundColor Cyan
          Write-Host "  • Healthy VMs: $healthyVMs" -ForegroundColor Green
          Write-Host "  • System Health: $($vmsState.statistics.systemHealth)" -ForegroundColor Green
          
          # تصدير النتائج
          "status=healthy" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "count=$($vmsState.vms.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: 🧪 Run Quick Tests
        shell: pwsh
        run: |
          Write-Host "`n🧪 Running Quick Tests..." -ForegroundColor Yellow
          if (Test-Path 'tests/unit-tests.ps1') {
              pwsh -File tests/unit-tests.ps1 -TestCategory basic
          } else {
              Write-Host "⚠️ Test file not found, skipping..." -ForegroundColor Yellow
          }

      - name: 📤 Upload Health Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: health-report
          path: |
            logs/health-*.log
            results/health-*.json
          retention-days: 7
          if-no-files-found: ignore

  # ═══════════════════════════════════════════════════════════════
  # Job 2: VM Lifecycle Management
  # ═══════════════════════════════════════════════════════════════
  vm-lifecycle:
    name: 🖥️ VM Lifecycle Management
    runs-on: ubuntu-latest
    needs: health-check
    timeout-minutes: 15
    if: needs.health-check.outputs.health-status == 'healthy'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 🔍 Check Current VMs
        id: check-vms
        shell: pwsh
        run: |
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Cyan
          Write-Host "║     🖥️  VM LIFECYCLE MANAGEMENT                ║" -ForegroundColor Cyan
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Cyan
          
          $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
          $config = Get-Content '.github/system-config.json' | ConvertFrom-Json
          
          $currentCount = $vmsState.vms.Count
          $desiredCount = $config.vmConfig.desiredVmCount
          
          Write-Host "`n📊 VM Status:" -ForegroundColor Yellow
          Write-Host "  • Current: $currentCount" -ForegroundColor Cyan
          Write-Host "  • Desired: $desiredCount" -ForegroundColor Green
          Write-Host "  • Difference: $($desiredCount - $currentCount)" -ForegroundColor $(if($desiredCount -eq $currentCount){'Green'}else{'Yellow'})
          
          "current=$currentCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "desired=$desiredCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "needs-action=$($currentCount -ne $desiredCount)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: ⚙️ VM Operations
        shell: pwsh
        run: |
          Write-Host "`n⚙️ Performing VM Operations..." -ForegroundColor Yellow
          
          # التحقق من وجود السكريبتات
          if (Test-Path 'scripts/vm-lifecycle-manager.ps1') {
              # تنفيذ العمليات
              pwsh -File scripts/vm-lifecycle-manager.ps1 -Action status
          } else {
              Write-Host "⚠️ VM manager script not found" -ForegroundColor Yellow
          }

      - name: 💾 Update VM State
        shell: pwsh
        run: |
          Write-Host "`n💾 Updating VM State..." -ForegroundColor Yellow
          
          $timestamp = Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ'
          $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
          $vmsState.lastUpdated = $timestamp
          
          $vmsState | ConvertTo-Json -Depth 10 | Set-Content '.github/example-vms-state.json'
          
          Write-Host "✓ State Updated: $timestamp" -ForegroundColor Green

  # ═══════════════════════════════════════════════════════════════
  # Job 3: Master Election
  # ═══════════════════════════════════════════════════════════════
  master-election:
    name: 👑 Master Election
    runs-on: ubuntu-latest
    needs: [health-check, vm-lifecycle]
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 👑 Elect Master
        shell: pwsh
        run: |
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Magenta
          Write-Host "║     👑 MASTER ELECTION ENGINE                   ║" -ForegroundColor Magenta
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Magenta
          
          if (Test-Path 'scripts/master-election-engine.ps1') {
              pwsh -File scripts/master-election-engine.ps1 -Action info
          } else {
              Write-Host "⚠️ Master election script not found" -ForegroundColor Yellow
          }

      - name: 📊 Election Summary
        shell: pwsh
        run: |
          $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
          $master = $vmsState.vms | Where-Object { $_.role -eq "master" } | Select-Object -First 1
          
          if ($master) {
              Write-Host "`n👑 Current Master:" -ForegroundColor Green
              Write-Host "  • VM ID: $($master.vmId)" -ForegroundColor Cyan
              Write-Host "  • CPU: $($master.performance.cpuUsage)%" -ForegroundColor Yellow
              Write-Host "  • Memory: $($master.performance.memoryUsage)%" -ForegroundColor Yellow
          } else {
              Write-Host "⚠️ No master elected" -ForegroundColor Yellow
          }

  # ═══════════════════════════════════════════════════════════════
  # Job 4: Testing
  # ═══════════════════════════════════════════════════════════════
  testing:
    name: 🧪 Testing (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: master-election
    timeout-minutes: 20
    strategy:
      matrix:
        test-type: [unit, integration]
      fail-fast: false
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 🧪 Run Tests
        shell: pwsh
        run: |
          $testType = "${{ matrix.test-type }}"
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Yellow
          Write-Host "║     🧪 RUNNING $($testType.ToUpper()) TESTS            ║" -ForegroundColor Yellow
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Yellow
          
          switch ($testType) {
              "unit" { 
                  if (Test-Path 'tests/unit-tests.ps1') {
                      pwsh -File tests/unit-tests.ps1 -TestCategory all
                  }
              }
              "integration" { 
                  if (Test-Path 'tests/integration-tests.ps1') {
                      pwsh -File tests/integration-tests.ps1 -Scenario all
                  }
              }
          }

      - name: 📤 Upload Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.test-type }}
          path: results/
          retention-days: 30
          if-no-files-found: ignore

  # ═══════════════════════════════════════════════════════════════
  # Job 5: Summary
  # ═══════════════════════════════════════════════════════════════
  summary:
    name: 📋 Workflow Summary
    runs-on: ubuntu-latest
    needs: [health-check, vm-lifecycle, master-election, testing]
    if: always()
    
    steps:
      - name: 📊 Generate Summary
        shell: pwsh
        run: |
          Write-Host "╔════════════════════════════════════════════════════════════╗" -ForegroundColor Green
          Write-Host "║                                                            ║" -ForegroundColor Green
          Write-Host "║          ✅ WORKFLOW COMPLETED SUCCESSFULLY ✅            ║" -ForegroundColor Green
          Write-Host "║                                                            ║" -ForegroundColor Green
          Write-Host "╚════════════════════════════════════════════════════════════╝" -ForegroundColor Green
          
          Write-Host "`n📊 Execution Summary:" -ForegroundColor Yellow
          Write-Host "  • Health Check: ${{ needs.health-check.result }}" -ForegroundColor Cyan
          Write-Host "  • VM Lifecycle: ${{ needs.vm-lifecycle.result }}" -ForegroundColor Cyan
          Write-Host "  • Master Election: ${{ needs.master-election.result }}" -ForegroundColor Cyan
          Write-Host "  • Testing: ${{ needs.testing.result }}" -ForegroundColor Cyan

      - name: 🔔 Notify on Failure
        if: failure()
        run: |
          echo "::warning::⚠️ Workflow failed! Check logs for details."
