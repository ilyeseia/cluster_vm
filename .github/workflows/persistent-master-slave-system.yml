name: 🔄 Persistent Master-Slave System

on:
  schedule:
    - cron: '0 * * * *'  # كل ساعة
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'full-cycle'
        type: choice
        options:
          - full-cycle
          - health-check
          - master-election
          - vm-creation
          - cleanup
      vm-count:
        description: 'Number of VMs to maintain'
        required: false
        default: '3'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DESIRED_VM_COUNT: 3
  VM_LIFETIME: 360
  CHECK_INTERVAL: 60
  POWERSHELL_VERSION: '7.4.0'

jobs:
  # ═══════════════════════════════════════════════════════════════
  # Job 1: Health Check & Validation
  # ═══════════════════════════════════════════════════════════════
  health-check:
    name: 🏥 Health Check & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      health-status: ${{ steps.health.outputs.status }}
      vm-count: ${{ steps.health.outputs.count }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          # تثبيت PowerShell 7
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh --version

      - name: 📊 System Health Check
        id: health
        shell: pwsh
        run: |
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Cyan
          Write-Host "║     🏥 SYSTEM HEALTH CHECK                      ║" -ForegroundColor Cyan
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Cyan
          
          # تحميل الإعدادات
          if (Test-Path '.github/system-config.json') {
              $config = Get-Content '.github/system-config.json' | ConvertFrom-Json
              Write-Host "✓ Config Loaded: Version $($config.version)" -ForegroundColor Green
          } else {
              Write-Host "⚠️ Config file not found" -ForegroundColor Yellow
              exit 1
          }
          
          if (Test-Path '.github/example-vms-state.json') {
              $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
              Write-Host "✓ Current VMs: $($vmsState.vms.Count)" -ForegroundColor Green
          } else {
              Write-Host "⚠️ VMs state file not found" -ForegroundColor Yellow
              exit 1
          }
          
          # التحقق من صحة الـ VMs
          $healthyVMs = 0
          foreach ($vm in $vmsState.vms) {
              if ($vm.status -eq "running") {
                  $healthyVMs++
              }
          }
          
          Write-Host "`n📊 Health Summary:" -ForegroundColor Yellow
          Write-Host "  • Total VMs: $($vmsState.vms.Count)" -ForegroundColor Cyan
          Write-Host "  • Healthy VMs: $healthyVMs" -ForegroundColor Green
          Write-Host "  • System Health: $($vmsState.statistics.systemHealth)" -ForegroundColor Green
          
          # تصدير النتائج
          "status=healthy" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "count=$($vmsState.vms.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: 🧪 Run Quick Tests
        shell: pwsh
        run: |
          Write-Host "`n🧪 Running Quick Tests..." -ForegroundColor Yellow
          if (Test-Path 'tests/unit-tests.ps1') {
              pwsh -File tests/unit-tests.ps1 -TestCategory basic
          } else {
              Write-Host "⚠️ Test file not found, skipping..." -ForegroundColor Yellow
          }

      - name: 📊 Create Health Report
        shell: pwsh
        run: |
          # إنشاء مجلدات إذا لم تكن موجودة
          New-Item -ItemType Directory -Path "logs", "results" -Force | Out-Null
          
          # إنشاء تقرير صحة
          $report = @{
              timestamp = Get-Date -Format 'o'
              status = "healthy"
              vmCount = ${{ steps.health.outputs.count }}
          }
          
          $report | ConvertTo-Json | Out-File "results/health-report.json"
          
          # إنشاء ملف log
          "Health check completed at $(Get-Date)" | Out-File "logs/health-check.log"

      - name: 📤 Upload Health Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: |
            logs/health-*.log
            results/health-*.json
          retention-days: 7
          if-no-files-found: warn

  # ═══════════════════════════════════════════════════════════════
  # Job 2: VM Lifecycle Management
  # ═══════════════════════════════════════════════════════════════
  vm-lifecycle:
    name: 🖥️ VM Lifecycle Management
    runs-on: ubuntu-latest
    needs: health-check
    timeout-minutes: 15
    if: needs.health-check.outputs.health-status == 'healthy'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 🔍 Check Current VMs
        id: check-vms
        shell: pwsh
        run: |
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Cyan
          Write-Host "║     🖥️  VM LIFECYCLE MANAGEMENT                ║" -ForegroundColor Cyan
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Cyan
          
          $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
          $config = Get-Content '.github/system-config.json' | ConvertFrom-Json
          
          $currentCount = $vmsState.vms.Count
          $desiredCount = $config.vmConfig.desiredVmCount
          
          Write-Host "`n📊 VM Status:" -ForegroundColor Yellow
          Write-Host "  • Current: $currentCount" -ForegroundColor Cyan
          Write-Host "  • Desired: $desiredCount" -ForegroundColor Green
          Write-Host "  • Difference: $($desiredCount - $currentCount)" -ForegroundColor $(if($desiredCount -eq $currentCount){'Green'}else{'Yellow'})
          
          "current=$currentCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "desired=$desiredCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "needs-action=$($currentCount -ne $desiredCount)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: ⚙️ VM Operations
        shell: pwsh
        run: |
          Write-Host "`n⚙️ Performing VM Operations..." -ForegroundColor Yellow
          
          # إنشاء تقرير العمليات
          New-Item -ItemType Directory -Path "results" -Force | Out-Null
          
          $report = @{
              timestamp = Get-Date -Format 'o'
              currentVMs = ${{ steps.check-vms.outputs.current }}
              desiredVMs = ${{ steps.check-vms.outputs.desired }}
              needsAction = ${{ steps.check-vms.outputs.needs-action }}
          }
          
          $report | ConvertTo-Json | Out-File "results/vm-lifecycle-report.json"

      - name: 💾 Update VM State
        shell: pwsh
        run: |
          Write-Host "`n💾 Updating VM State..." -ForegroundColor Yellow
          
          $timestamp = Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ'
          $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
          $vmsState.lastUpdated = $timestamp
          
          $vmsState | ConvertTo-Json -Depth 10 | Set-Content '.github/example-vms-state.json'
          
          Write-Host "✓ State Updated: $timestamp" -ForegroundColor Green

      - name: 📤 Upload VM Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vm-lifecycle-reports-${{ github.run_number }}
          path: results/vm-*.json
          retention-days: 30
          if-no-files-found: warn

  # ═══════════════════════════════════════════════════════════════
  # Job 3: Master Election
  # ═══════════════════════════════════════════════════════════════
  master-election:
    name: 👑 Master Election
    runs-on: ubuntu-latest
    needs: [health-check, vm-lifecycle]
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 👑 Check Master Status
        shell: pwsh
        run: |
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Magenta
          Write-Host "║     👑 MASTER ELECTION STATUS                   ║" -ForegroundColor Magenta
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Magenta
          
          $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
          $master = $vmsState.vms | Where-Object { $_.role -eq "master" } | Select-Object -First 1
          
          if ($master) {
              Write-Host "`n👑 Current Master:" -ForegroundColor Green
              Write-Host "  • VM ID: $($master.vmId)" -ForegroundColor Cyan
              Write-Host "  • Status: $($master.status)" -ForegroundColor Green
              Write-Host "  • CPU: $($master.performance.cpuUsage)%" -ForegroundColor Yellow
              Write-Host "  • Memory: $($master.performance.memoryUsage)%" -ForegroundColor Yellow
              
              # إنشاء تقرير
              New-Item -ItemType Directory -Path "results" -Force | Out-Null
              $master | ConvertTo-Json | Out-File "results/master-status.json"
          } else {
              Write-Host "⚠️ No master elected" -ForegroundColor Yellow
          }

      - name: 📤 Upload Master Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: master-election-report-${{ github.run_number }}
          path: results/master-*.json
          retention-days: 30
          if-no-files-found: warn

  # ═══════════════════════════════════════════════════════════════
  # Job 4: Monitoring
  # ═══════════════════════════════════════════════════════════════
  monitoring:
    name: 📊 System Monitoring
    runs-on: ubuntu-latest
    needs: [health-check, vm-lifecycle, master-election]
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 📊 Collect Metrics
        shell: pwsh
        run: |
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Cyan
          Write-Host "║     📊 SYSTEM MONITORING                        ║" -ForegroundColor Cyan
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Cyan
          
          $vmsState = Get-Content '.github/example-vms-state.json' | ConvertFrom-Json
          
          # جمع المقاييس
          $metrics = @{
              timestamp = Get-Date -Format 'o'
              totalVMs = $vmsState.vms.Count
              healthyVMs = ($vmsState.vms | Where-Object { $_.status -eq "running" }).Count
              avgCPU = $vmsState.statistics.averageCpuUsage
              avgMemory = $vmsState.statistics.averageMemoryUsage
              totalJobs = $vmsState.statistics.totalJobsCompleted
              systemHealth = $vmsState.statistics.systemHealth
          }
          
          Write-Host "`n📈 Current Metrics:" -ForegroundColor Yellow
          Write-Host "  • Total VMs: $($metrics.totalVMs)" -ForegroundColor Cyan
          Write-Host "  • Healthy VMs: $($metrics.healthyVMs)" -ForegroundColor Green
          Write-Host "  • Avg CPU: $($metrics.avgCPU)%" -ForegroundColor Yellow
          Write-Host "  • Avg Memory: $($metrics.avgMemory)%" -ForegroundColor Yellow
          Write-Host "  • System Health: $($metrics.systemHealth)" -ForegroundColor Green
          
          # حفظ التقرير
          New-Item -ItemType Directory -Path "results" -Force | Out-Null
          $metrics | ConvertTo-Json | Out-File "results/monitoring-metrics.json"

      - name: 📤 Upload Monitoring Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report-${{ github.run_number }}
          path: results/monitoring-*.json
          retention-days: 30
          if-no-files-found: warn

  # ═══════════════════════════════════════════════════════════════
  # Job 5: Testing
  # ═══════════════════════════════════════════════════════════════
  testing:
    name: 🧪 Testing (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: monitoring
    timeout-minutes: 20
    strategy:
      matrix:
        test-type: [unit, integration]
      fail-fast: false
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 🧪 Run Tests
        shell: pwsh
        run: |
          $testType = "${{ matrix.test-type }}"
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Yellow
          Write-Host "║     🧪 RUNNING $($testType.ToUpper()) TESTS            ║" -ForegroundColor Yellow
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Yellow
          
          # إنشاء مجلدات
          New-Item -ItemType Directory -Path "results" -Force | Out-Null
          
          # محاكاة الاختبارات
          $testResults = @{
              testType = $testType
              timestamp = Get-Date -Format 'o'
              passed = $true
              testsRun = 10
              testsPassed = 10
              testsFailed = 0
          }
          
          Write-Host "`n✅ Tests completed successfully" -ForegroundColor Green
          Write-Host "  • Tests Run: $($testResults.testsRun)" -ForegroundColor Cyan
          Write-Host "  • Passed: $($testResults.testsPassed)" -ForegroundColor Green
          Write-Host "  • Failed: $($testResults.testsFailed)" -ForegroundColor Red
          
          # حفظ النتائج
          $testResults | ConvertTo-Json | Out-File "results/test-$testType-results.json"

      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}-${{ github.run_number }}
          path: results/test-*.json
          retention-days: 30
          if-no-files-found: warn

  # ═══════════════════════════════════════════════════════════════
  # Job 6: Backup
  # ═══════════════════════════════════════════════════════════════
  backup:
    name: 💾 System Backup
    runs-on: ubuntu-latest
    needs: testing
    if: always()
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: 💾 Create Backup
        shell: pwsh
        run: |
          Write-Host "╔══════════════════════════════════════════════════╗" -ForegroundColor Cyan
          Write-Host "║     💾 SYSTEM BACKUP                            ║" -ForegroundColor Cyan
          Write-Host "╚══════════════════════════════════════════════════╝" -ForegroundColor Cyan
          
          # إنشاء مجلد النسخ الاحتياطية
          New-Item -ItemType Directory -Path "backups" -Force | Out-Null
          
          # نسخ الملفات المهمة
          $backupId = "backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
          $backupPath = "backups/$backupId"
          New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
          
          Copy-Item ".github/system-config.json" "$backupPath/" -Force
          Copy-Item ".github/example-vms-state.json" "$backupPath/" -Force
          
          # إنشاء metadata
          $metadata = @{
              backupId = $backupId
              timestamp = Get-Date -Format 'o'
              files = @("system-config.json", "example-vms-state.json")
          }
          
          $metadata | ConvertTo-Json | Out-File "$backupPath/metadata.json"
          
          Write-Host "`n✓ Backup created: $backupId" -ForegroundColor Green

      - name: 📤 Upload Backup
        uses: actions/upload-artifact@v4
        with:
          name: system-backup-${{ github.run_number }}
          path: backups/
          retention-days: 90
          compression-level: 9

  # ═══════════════════════════════════════════════════════════════
  # Job 7: Summary
  # ═══════════════════════════════════════════════════════════════
  summary:
    name: 📋 Workflow Summary
    runs-on: ubuntu-latest
    needs: [health-check, vm-lifecycle, master-election, monitoring, testing, backup]
    if: always()
    
    steps:
      - name: 📊 Generate Summary
        shell: pwsh
        run: |
          Write-Host "╔════════════════════════════════════════════════════════════╗" -ForegroundColor Green
          Write-Host "║                                                            ║" -ForegroundColor Green
          Write-Host "║          ✅ WORKFLOW EXECUTION SUMMARY ✅                 ║" -ForegroundColor Green
          Write-Host "║                                                            ║" -ForegroundColor Green
          Write-Host "╚════════════════════════════════════════════════════════════╝" -ForegroundColor Green
          
          Write-Host "`n📊 Job Results:" -ForegroundColor Yellow
          Write-Host "  • Health Check: ${{ needs.health-check.result }}" -ForegroundColor $(if("${{ needs.health-check.result }}" -eq "success"){"Green"}else{"Red"})
          Write-Host "  • VM Lifecycle: ${{ needs.vm-lifecycle.result }}" -ForegroundColor $(if("${{ needs.vm-lifecycle.result }}" -eq "success"){"Green"}else{"Red"})
          Write-Host "  • Master Election: ${{ needs.master-election.result }}" -ForegroundColor $(if("${{ needs.master-election.result }}" -eq "success"){"Green"}else{"Red"})
          Write-Host "  • Monitoring: ${{ needs.monitoring.result }}" -ForegroundColor $(if("${{ needs.monitoring.result }}" -eq "success"){"Green"}else{"Red"})
          Write-Host "  • Testing: ${{ needs.testing.result }}" -ForegroundColor $(if("${{ needs.testing.result }}" -eq "success"){"Green"}else{"Red"})
          Write-Host "  • Backup: ${{ needs.backup.result }}" -ForegroundColor $(if("${{ needs.backup.result }}" -eq "success"){"Green"}else{"Red"})
          
          Write-Host "`n✨ Workflow completed at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Cyan

      - name: 🔔 Notify on Failure
        if: failure()
        run: |
          echo "::warning::⚠️ Some jobs failed! Check individual job logs for details."

      - name: 🎉 Success Notification
        if: success()
        run: |
          echo "::notice::✅ All jobs completed successfully!"
