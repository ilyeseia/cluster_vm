name: ‚ôæÔ∏è Infinite VM Matrix System

on:
  schedule:
    - cron: '0 * * * *'
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'System Action'
        required: true
        type: choice
        options:
          - create-runner
          - scale-up
          - scale-down
          - emergency-renewal
          - full-system-check
        default: 'create-runner'
      runner-count:
        description: 'Number of runners to create'
        required: false
        default: '1'
        type: string

env:
  TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
  GMAIL_USER: ${{ secrets.GMAIL_USER }}
  GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
  SYSTEM_MODE: production
  MAX_RUNTIME: 21000
  RENEWAL_THRESHOLD: 18000

jobs:
  check-quota:
    name: üí∞ Check Resource Quota
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-quota: ${{ steps.check.outputs.has-quota }}
      usage-percentage: ${{ steps.check.outputs.usage-percentage }}
      remaining-minutes: ${{ steps.check.outputs.remaining-minutes }}
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîß Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: üí∞ Check Quota
        id: check
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        run: |
          Write-Host "Checking resource quota..." -ForegroundColor Cyan
          
          try {
              $headers = @{
                  "Authorization" = "Bearer $env:GITHUB_TOKEN"
                  "Accept" = "application/vnd.github+json"
                  "X-GitHub-Api-Version" = "2022-11-28"
              }
              
              $owner = $env:GITHUB_REPOSITORY_OWNER
              $url = "https://api.github.com/users/$owner/settings/billing/actions"
              
              $usage = Invoke-RestMethod -Uri $url -Headers $headers -Method Get
              
              $used = $usage.total_minutes_used
              $total = $usage.included_minutes
              $remaining = $total - $used
              $percentage = if ($total -gt 0) { [math]::Round(($used / $total) * 100, 2) } else { 0 }
              
              Write-Host "Usage: $used / $total minutes ($percentage%)" -ForegroundColor Cyan
              Write-Host "Remaining: $remaining minutes" -ForegroundColor Green
              
              $hasQuota = $remaining -gt 60
              
              "has-quota=$($hasQuota.ToString().ToLower())" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "usage-percentage=$percentage" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "remaining-minutes=$remaining" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              
              if (-not $hasQuota) {
                  Write-Host "WARNING: Low quota! Only $remaining minutes remaining" -ForegroundColor Yellow
              }
              
          } catch {
              Write-Host "Could not check quota: $_" -ForegroundColor Yellow
              "has-quota=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "usage-percentage=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "remaining-minutes=999" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

  orchestrator:
    name: üé≠ System Orchestrator
    runs-on: ubuntu-latest
    needs: check-quota
    if: needs.check-quota.outputs.has-quota == 'true'
    timeout-minutes: 10
    outputs:
      should-create-runner: ${{ steps.decide.outputs.create-runner }}
      should-renew: ${{ steps.decide.outputs.renew }}
      active-runners: ${{ steps.decide.outputs.active-count }}
      action-plan: ${{ steps.decide.outputs.plan }}
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîß Setup PowerShell
        shell: bash
        run: |
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: üìä Analyze Current State
        id: analyze
        shell: pwsh
        run: |
          Write-Host "Analyzing system state..." -ForegroundColor Cyan
          
          $activeRunners = 2
          $minRunners = 2
          $maxRunners = 3
          
          Write-Host "Active Runners: $activeRunners" -ForegroundColor Cyan
          Write-Host "Remaining Quota: ${{ needs.check-quota.outputs.remaining-minutes }} minutes" -ForegroundColor Green
          
          "active-runners=$activeRunners" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "min-runners=$minRunners" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "max-runners=$maxRunners" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: üß† Decision Engine
        id: decide
        shell: pwsh
        run: |
          Write-Host "Making decisions..." -ForegroundColor Magenta
          
          $activeRunners = [int]"${{ steps.analyze.outputs.active-runners }}"
          $minRunners = [int]"${{ steps.analyze.outputs.min-runners }}"
          $maxRunners = [int]"${{ steps.analyze.outputs.max-runners }}"
          $remainingMinutes = [int]"${{ needs.check-quota.outputs.remaining-minutes }}"
          
          $shouldCreate = $false
          $actionPlan = "maintain"
          
          if ($remainingMinutes -lt 60) {
              Write-Host "Insufficient quota for new runners" -ForegroundColor Yellow
              $shouldCreate = $false
              $actionPlan = "pause"
          } elseif ($activeRunners -lt $maxRunners -and $remainingMinutes -gt 120) {
              $shouldCreate = $true
              $actionPlan = "create"
              Write-Host "Decision: CREATE new runner" -ForegroundColor Green
          } else {
              Write-Host "Decision: MAINTAIN current state" -ForegroundColor Yellow
          }
          
          Write-Host "Create Runner: $shouldCreate" -ForegroundColor Cyan
          Write-Host "Strategy: $actionPlan" -ForegroundColor Cyan
          
          "create-runner=$($shouldCreate.ToString().ToLower())" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "renew=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "active-count=$activeRunners" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "plan=$actionPlan" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

  vm-matrix-runner:
    name: üñ•Ô∏è VM Runner ${{ matrix.runner-id }}
    runs-on: ubuntu-latest
    needs: [check-quota, orchestrator]
    if: |
      needs.check-quota.outputs.has-quota == 'true' &&
      needs.orchestrator.outputs.should-create-runner == 'true'
    timeout-minutes: 360
    strategy:
      matrix:
        runner-id: [1, 2, 3]
      fail-fast: false
      max-parallel: 3
    
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîß Setup Environment
        shell: bash
        run: |
          echo "Setting up Runner ${{ matrix.runner-id }}..."
          wget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          curl -fsSL https://tailscale.com/install.sh | sh
          echo "Environment ready"

      - name: üîó Connect to Tailscale
        shell: bash
        run: |
          echo "Connecting to Tailscale..."
          HOSTNAME="vm-runner-${{ github.run_number }}-${{ matrix.runner-id }}"
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$HOSTNAME --accept-routes
          TAILSCALE_IP=$(sudo tailscale ip -4)
          echo "Connected with IP: $TAILSCALE_IP"
          echo "TAILSCALE_IP=$TAILSCALE_IP" >> $GITHUB_ENV
          echo "HOSTNAME=$HOSTNAME" >> $GITHUB_ENV

      - name: üìä Register Runner
        shell: pwsh
        run: |
          Write-Host "Registering Runner ${{ matrix.runner-id }}..." -ForegroundColor Cyan
          
          $metadata = @{
              runnerId = "${{ matrix.runner-id }}"
              runNumber = "${{ github.run_number }}"
              hostname = $env:HOSTNAME
              tailscaleIP = $env:TAILSCALE_IP
              startTime = Get-Date -Format 'o'
              expiresAt = (Get-Date).AddSeconds([int]$env:MAX_RUNTIME).ToString('o')
              status = "active"
              quotaRemaining = "${{ needs.check-quota.outputs.remaining-minutes }}"
          }
          
          New-Item -ItemType Directory -Path "state" -Force | Out-Null
          $metadata | ConvertTo-Json | Set-Content "state/runner-${{ matrix.runner-id }}-metadata.json"
          
          Write-Host "Runner registered successfully" -ForegroundColor Green

      - name: üîê Generate Credentials
        shell: pwsh
        run: |
          Write-Host "Generating credentials..." -ForegroundColor Magenta
          
          $password = -join ((65..90) + (97..122) + (48..57) + (33..47) | Get-Random -Count 24 | ForEach-Object {[char]$_})
          
          $credentials = @{
              runnerId = "${{ matrix.runner-id }}"
              vmId = $env:HOSTNAME
              tailscaleIP = $env:TAILSCALE_IP
              username = "admin"
              password = $password
              sshCommand = "ssh admin@$($env:TAILSCALE_IP)"
              createdAt = Get-Date -Format 'o'
              expiresAt = (Get-Date).AddSeconds([int]$env:MAX_RUNTIME).ToString('o')
              quotaUsed = "${{ needs.check-quota.outputs.usage-percentage }}%"
          }
          
          New-Item -ItemType Directory -Path "credentials" -Force | Out-Null
          $credentials | ConvertTo-Json | Set-Content "credentials/runner-${{ matrix.runner-id }}-creds.json"
          
          Write-Host "Credentials generated" -ForegroundColor Green

      - name: üì§ Upload State
        uses: actions/upload-artifact@v4
        with:
          name: runner-${{ matrix.runner-id }}-state-${{ github.run_number }}
          path: |
            state/runner-${{ matrix.runner-id }}-*.json
            credentials/runner-${{ matrix.runner-id }}-*.json
          retention-days: 7

      - name: ‚è∞ Self-Sustaining Loop
        shell: pwsh
        run: |
          Write-Host "Starting self-sustaining loop..." -ForegroundColor Green
          
          $startTime = Get-Date
          $maxRuntime = [int]$env:MAX_RUNTIME
          $renewalThreshold = [int]$env:RENEWAL_THRESHOLD
          $checkInterval = 300
          $iteration = 0
          
          Write-Host "Max Runtime: $($maxRuntime/3600) hours" -ForegroundColor Cyan
          Write-Host "Renewal at: $($renewalThreshold/3600) hours" -ForegroundColor Cyan
          
          while ($true) {
              $elapsed = ((Get-Date) - $startTime).TotalSeconds
              $remaining = $maxRuntime - $elapsed
              $iteration++
              
              Write-Host "[$iteration] Runtime: $([math]::Round($elapsed/60, 1))m (Remaining: $([math]::Round($remaining/60, 1))m)" -ForegroundColor Cyan
              
              if ($elapsed -ge $renewalThreshold) {
                  Write-Host "RENEWAL THRESHOLD REACHED" -ForegroundColor Yellow
                  break
              }
              
              try {
                  sudo tailscale status | Out-Null
                  Write-Host "Tailscale: Connected" -ForegroundColor Green
              } catch {
                  Write-Host "Tailscale: Reconnecting..." -ForegroundColor Yellow
                  sudo tailscale up
              }
              
              if ($remaining -gt $checkInterval) {
                  Start-Sleep -Seconds $checkInterval
              } else {
                  Write-Host "Approaching timeout, exiting..." -ForegroundColor Yellow
                  break
              }
          }
          
          Write-Host "Loop completed" -ForegroundColor Green

      - name: üìß Send Email
        if: matrix.runner-id == '1'
        shell: pwsh
        env:
          GMAIL_USER: ${{ secrets.GMAIL_USER }}
          GMAIL_PASS: ${{ secrets.GMAIL_PASS }}
          RUN_NUMBER: ${{ github.run_number }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
          QUOTA_USAGE: ${{ needs.check-quota.outputs.usage-percentage }}
          QUOTA_REMAINING: ${{ needs.check-quota.outputs.remaining-minutes }}
        run: |
          Write-Host "Preparing email..." -ForegroundColor Cyan
          
          $allCreds = @()
          if (Test-Path "credentials") {
              $allCreds = Get-ChildItem "credentials/*.json" -ErrorAction SilentlyContinue | ForEach-Object {
                  Get-Content $_.FullName | ConvertFrom-Json
              }
          }
          
          if ($allCreds.Count -eq 0) {
              Write-Host "No credentials to send" -ForegroundColor Yellow
              exit 0
          }
          
          $runNumber = $env:RUN_NUMBER
          $runId = $env:RUN_ID
          $repo = $env:REPO
          $quotaUsage = $env:QUOTA_USAGE
          $quotaRemaining = $env:QUOTA_REMAINING
          $currentTime = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
          
          # ÿ®ŸÜÿßÿ° HTML ÿ®ÿØŸàŸÜ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ here-string ŸÑÿ™ÿ¨ŸÜÿ® ŸÖÿ¥ÿßŸÉŸÑ YAML
          $htmlBody = "<!DOCTYPE html><html><head><meta charset='UTF-8'><style>"
          $htmlBody += "body{font-family:Arial,sans-serif;background:#f5f5f5;padding:20px;margin:0;}"
          $htmlBody += ".container{max-width:800px;margin:0 auto;background:white;border-radius:10px;padding:30px;box-shadow:0 4px 6px rgba(0,0,0,0.1);}"
          $htmlBody += "h1{color:#2c3e50;border-bottom:3px solid #3498db;padding-bottom:10px;}"
          $htmlBody += ".quota-alert{background:#fff3cd;border-left:4px solid #ffc107;padding:15px;margin:20px 0;border-radius:5px;}"
          $htmlBody += ".runner-card{background:#ecf0f1;padding:20px;margin:15px 0;border-radius:8px;border-left:5px solid #3498db;}"
          $htmlBody += ".cred-row{display:flex;justify-content:space-between;padding:8px 0;border-bottom:1px solid #ddd;}"
          $htmlBody += ".label{font-weight:bold;color:#555;}"
          $htmlBody += ".value{font-family:monospace;background:#fff;padding:5px 10px;border-radius:3px;}"
          $htmlBody += "</style></head><body><div class='container'>"
          $htmlBody += "<h1>Infinite VM Matrix - Active Runners</h1>"
          $htmlBody += "<p><strong>Run #$runNumber</strong> | $currentTime</p>"
          $htmlBody += "<div class='quota-alert'><strong>Resource Usage:</strong><br>"
          $htmlBody += "Quota Used: $quotaUsage%<br>Remaining: $quotaRemaining minutes</div>"
          
          foreach ($cred in $allCreds) {
              $htmlBody += "<div class='runner-card'><h3>VM Runner $($cred.runnerId)</h3>"
              $htmlBody += "<div class='cred-row'><span class='label'>Tailscale IP:</span><span class='value' style='color:#27ae60;font-weight:bold;'>$($cred.tailscaleIP)</span></div>"
              $htmlBody += "<div class='cred-row'><span class='label'>Username:</span><span class='value'>$($cred.username)</span></div>"
              $htmlBody += "<div class='cred-row'><span class='label'>Password:</span><span class='value' style='background:#fff3cd;'>$($cred.password)</span></div>"
              $htmlBody += "<div class='cred-row'><span class='label'>SSH:</span><span class='value'>$($cred.sshCommand)</span></div>"
              $htmlBody += "<div class='cred-row'><span class='label'>Expires:</span><span class='value' style='color:#e74c3c;'>$($cred.expiresAt)</span></div>"
              $htmlBody += "</div>"
          }
          
          $htmlBody += "<p style='margin-top:30px;padding-top:20px;border-top:1px solid #ddd;color:#7f8c8d;font-size:12px;'>"
          $htmlBody += "Automated by GitHub Actions | <a href='https://github.com/$repo/actions/runs/$runId'>View Run</a></p>"
          $htmlBody += "</div></body></html>"
          
          try {
              $securePass = ConvertTo-SecureString $env:GMAIL_PASS -AsPlainText -Force
              $credential = New-Object System.Management.Automation.PSCredential($env:GMAIL_USER, $securePass)
              
              Send-MailMessage `
                  -From $env:GMAIL_USER `
                  -To $env:GMAIL_USER `
                  -Subject "VM Matrix Run #$runNumber - $($allCreds.Count) Runners ($quotaUsage% used)" `
                  -Body $htmlBody `
                  -BodyAsHtml `
                  -SmtpServer "smtp.gmail.com" `
                  -Port 587 `
                  -UseSsl `
                  -Credential $credential
              
              Write-Host "Email sent successfully" -ForegroundColor Green
          } catch {
              Write-Host "Email failed: $_" -ForegroundColor Yellow
          }

      - name: üßπ Cleanup
        if: always()
        shell: bash
        run: |
          echo "Cleaning up..."
          sudo tailscale down || true
          echo "Cleanup completed"

  health-monitor:
    name: üè• Health Monitor
    runs-on: ubuntu-latest
    needs: [check-quota, orchestrator, vm-matrix-runner]
    if: always()
    
    steps:
      - name: üìä Generate Summary
        shell: pwsh
        run: |
          Write-Host "Generating summary..." -ForegroundColor Green
          Write-Host "Run Number: ${{ github.run_number }}" -ForegroundColor Cyan
          Write-Host "Quota Check: ${{ needs.check-quota.result }}" -ForegroundColor Cyan
          Write-Host "Orchestrator: ${{ needs.orchestrator.result }}" -ForegroundColor Cyan
          Write-Host "VM Runners: ${{ needs.vm-matrix-runner.result }}" -ForegroundColor Cyan
          Write-Host "Has Quota: ${{ needs.check-quota.outputs.has-quota }}" -ForegroundColor Cyan
          Write-Host "Usage: ${{ needs.check-quota.outputs.usage-percentage }}%" -ForegroundColor Cyan
          Write-Host "Remaining: ${{ needs.check-quota.outputs.remaining-minutes }} minutes" -ForegroundColor Green
          
          $hasQuota = "${{ needs.check-quota.outputs.has-quota }}"
          if ($hasQuota -eq "true") {
              Write-Host "System Status: OPERATIONAL" -ForegroundColor Green
          } else {
              Write-Host "System Status: PAUSED (Low Quota)" -ForegroundColor Yellow
          }

      - name: üìù Create Report
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # Infinite VM Matrix - Summary
          
          ## Status
          
          | Component | Status |
          |-----------|--------|
          | Quota Check | ${{ needs.check-quota.result }} |
          | Orchestrator | ${{ needs.orchestrator.result }} |
          | VM Runners | ${{ needs.vm-matrix-runner.result }} |
          
          ## Resource Usage
          
          - Has Quota: ${{ needs.check-quota.outputs.has-quota }}
          - Usage: ${{ needs.check-quota.outputs.usage-percentage }}%
          - Remaining: ${{ needs.check-quota.outputs.remaining-minutes }} minutes
          
          ## Links
          
          - [Billing Dashboard](https://github.com/settings/billing)
          - [This Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF
